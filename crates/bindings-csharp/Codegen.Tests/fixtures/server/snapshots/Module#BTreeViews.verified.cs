//HintName: BTreeViews.cs
// <auto-generated />
#nullable enable

partial struct BTreeViews : System.IEquatable<BTreeViews>, SpacetimeDB.BSATN.IStructuralReadWrite
{
    public void ReadFields(System.IO.BinaryReader reader)
    {
        Id = BSATN.IdRW.Read(reader);
        X = BSATN.XRW.Read(reader);
        Y = BSATN.YRW.Read(reader);
        Faction = BSATN.FactionRW.Read(reader);
    }

    public void WriteFields(System.IO.BinaryWriter writer)
    {
        BSATN.IdRW.Write(writer, Id);
        BSATN.XRW.Write(writer, X);
        BSATN.YRW.Write(writer, Y);
        BSATN.FactionRW.Write(writer, Faction);
    }

    public override string ToString() =>
        $"BTreeViews {{ Id = {SpacetimeDB.BSATN.StringUtil.GenericToString(Id)}, X = {SpacetimeDB.BSATN.StringUtil.GenericToString(X)}, Y = {SpacetimeDB.BSATN.StringUtil.GenericToString(Y)}, Faction = {SpacetimeDB.BSATN.StringUtil.GenericToString(Faction)} }}";

    public readonly partial struct BSATN : SpacetimeDB.BSATN.IReadWrite<BTreeViews>
    {
        internal static readonly SpacetimeDB.Identity.BSATN IdRW = new();
        internal static readonly SpacetimeDB.BSATN.U32 XRW = new();
        internal static readonly SpacetimeDB.BSATN.U32 YRW = new();
        internal static readonly SpacetimeDB.BSATN.String FactionRW = new();

        public BTreeViews Read(System.IO.BinaryReader reader) =>
            SpacetimeDB.BSATN.IStructuralReadWrite.Read<BTreeViews>(reader);

        public void Write(System.IO.BinaryWriter writer, BTreeViews value)
        {
            value.WriteFields(writer);
        }

        public SpacetimeDB.BSATN.AlgebraicType.Ref GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) =>
            registrar.RegisterType<BTreeViews>(_ => new SpacetimeDB.BSATN.AlgebraicType.Product(
                new SpacetimeDB.BSATN.AggregateElement[]
                {
                    new("Id", IdRW.GetAlgebraicType(registrar)),
                    new("X", XRW.GetAlgebraicType(registrar)),
                    new("Y", YRW.GetAlgebraicType(registrar)),
                    new("Faction", FactionRW.GetAlgebraicType(registrar))
                }
            ));

        SpacetimeDB.BSATN.AlgebraicType SpacetimeDB.BSATN.IReadWrite<BTreeViews>.GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) => GetAlgebraicType(registrar);
    }

    public override int GetHashCode()
    {
        return Id.GetHashCode() ^ X.GetHashCode() ^ Y.GetHashCode() ^ Faction.GetHashCode();
    }

#nullable enable
    public bool Equals(BTreeViews that)
    {
        return Id.Equals(that.Id)
            && X.Equals(that.X)
            && Y.Equals(that.Y)
            && Faction.Equals(that.Faction);
    }

    public override bool Equals(object? that)
    {
        if (that == null)
        {
            return false;
        }
        var that_ = that as BTreeViews?;
        if (((object?)that_) == null)
        {
            return false;
        }
        return Equals(that_);
    }

    public static bool operator ==(BTreeViews this_, BTreeViews that)
    {
        if (((object?)this_) == null || ((object?)that) == null)
        {
            return object.Equals(this_, that);
        }
        return this_.Equals(that);
    }

    public static bool operator !=(BTreeViews this_, BTreeViews that)
    {
        if (((object?)this_) == null || ((object?)that) == null)
        {
            return !object.Equals(this_, that);
        }
        return !this_.Equals(that);
    }
#nullable restore
} // BTreeViews
